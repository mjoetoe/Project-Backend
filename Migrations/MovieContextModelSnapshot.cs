// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_Backend.Data;

namespace Project_Backend.Migrations
{
    [DbContext(typeof(MovieContext))]
    partial class MovieContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project_Backend.Models.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirectorId");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            DirectorId = 1,
                            Age = 25,
                            LastName = "Spielberg",
                            Name = "Steven"
                        },
                        new
                        {
                            DirectorId = 2,
                            Age = 50,
                            LastName = "Nolan",
                            Name = "Christopher"
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.DirectorMovies", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.HasKey("MoviesId", "DirectorId");

                    b.HasIndex("DirectorId");

                    b.ToTable("DirectorMovies");

                    b.HasData(
                        new
                        {
                            MoviesId = 1,
                            DirectorId = 1
                        },
                        new
                        {
                            MoviesId = 2,
                            DirectorId = 2
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.Movies", b =>
                {
                    b.Property<int>("MoviesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MoviesId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MoviesId = 1,
                            Genre = "Romance",
                            Name = "Titanic",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MoviesId = 2,
                            Genre = "Sci-Fi",
                            Name = "The Martian",
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.DirectorMovies", b =>
                {
                    b.HasOne("Project_Backend.Models.Director", "Director")
                        .WithMany("DirectorMovies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_Backend.Models.Movies", "Movies")
                        .WithMany("DirectorMovies")
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Project_Backend.Models.Director", b =>
                {
                    b.Navigation("DirectorMovies");
                });

            modelBuilder.Entity("Project_Backend.Models.Movies", b =>
                {
                    b.Navigation("DirectorMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
